# quantis_crypto_trader_gemini/main.py

import config
from database import init_db
from binance_client import BinanceHandler
from binance.client import Client
from redis_client import RedisHandler
from gemini_analyzer import GeminiAnalyzer
from telegram_interface import send_telegram_message, escape_markdown_v2
from strategy import StrategyManager # Importa o gerenciador de estrat√©gia
import pandas as pd
import datetime
import schedule # Para agendamento
import time # Para o sleep do schedule

# --- Handlers Globais ---
# Definimos fora da fun√ß√£o main para serem acess√≠veis pelo job agendado
binance_handler: BinanceHandler | None = None
redis_handler: RedisHandler | None = None
gemini_analyzer: GeminiAnalyzer | None = None
strategy_manager: StrategyManager | None = None

def initialize_services():
    """Inicializa todos os servi√ßos necess√°rios."""
    global binance_handler, redis_handler, gemini_analyzer, strategy_manager
    print("Inicializando servi√ßos...")
    try:
        init_db()
        config.load_or_set_initial_db_settings()
        redis_handler = RedisHandler(host=config.REDIS_HOST, port=config.REDIS_PORT, db=config.REDIS_DB)
        binance_handler = BinanceHandler(api_key=config.BINANCE_API_KEY, api_secret=config.BINANCE_SECRET_KEY)
        gemini_analyzer = GeminiAnalyzer(api_key=config.GEMINI_API_KEY)
        strategy_manager = StrategyManager(redis_handler=redis_handler, binance_handler=binance_handler)
        print("Todos os servi√ßos inicializados com sucesso.")
        return True
    except Exception as e:
        print(f"Erro CR√çTICO durante a inicializa√ß√£o dos servi√ßos: {e}")
        try:
            critical_message = f"üÜò *ERRO CR√çTICO NA INICIALIZA√á√ÉO*:\nN√£o foi poss√≠vel iniciar os servi√ßos do rob√¥\\.\nErro: {escape_markdown_v2(str(e))}"
            send_telegram_message(critical_message)
        except Exception as telegram_err:
            print(f"ERRO ADICIONAL: Falha ao enviar notifica√ß√£o de erro de inicializa√ß√£o para o Telegram: {telegram_err}")
        return False

def trade_cycle():
    """Executa um ciclo completo de coleta, an√°lise e decis√£o."""
    global binance_handler, redis_handler, gemini_analyzer, strategy_manager

    # Verifica se os handlers foram inicializados corretamente
    if not all([binance_handler, redis_handler, gemini_analyzer, strategy_manager]):
         print("Erro: Servi√ßos n√£o inicializados corretamente. Abortando ciclo.")
         # Poder√≠amos tentar re-inicializar ou apenas parar
         # schedule.clear() # Para o agendamento se falhar
         return

    start_cycle_time = datetime.datetime.now()
    print(f"\n--- Iniciando Ciclo de Trade em {start_cycle_time.strftime('%Y-%m-%d %H:%M:%S')} ---")

    # Defini√ß√µes do ciclo (poderiam vir de config/DB)
    symbol = strategy_manager.symbol # Pega o s√≠mbolo do strategy manager
    interval = Client.KLINE_INTERVAL_1HOUR
    limit = 100 # Buscamos mais velas para an√°lise potencialmente melhor

    klines_df: pd.DataFrame | None = None
    trade_signal: str | None = None

    try:
        # 1. Coleta de Dados (com Cache)
        cache_key = redis_handler._generate_kline_key(symbol, interval)
        klines_df = redis_handler.get_dataframe(cache_key)

        if klines_df is not None:
            print(f"--- Cache HIT para {cache_key} ---")
            # Verificar se o cache √© recente o suficiente? Talvez comparar o √∫ltimo timestamp?
            # Por enquanto, usamos como est√°.
        else:
            print(f"--- Cache MISS para {cache_key} ---")
            print("Buscando dados na API da Binance...")
            # Pega um n√∫mero maior de velas para a an√°lise do Gemini
            klines_df = binance_handler.get_klines(symbol=symbol, interval=interval, limit=limit)
            if klines_df is not None:
                # TTL um pouco menor que o intervalo da vela
                ttl = 55 * 60 # 55 minutos
                redis_handler.cache_dataframe(cache_key, klines_df, ttl_seconds=ttl)
            else:
                print(f"N√£o foi poss√≠vel buscar klines para {symbol} na Binance.")

        # 2. An√°lise Gemini
        if klines_df is not None:
             print(f"Enviando {len(klines_df)} klines para an√°lise do Gemini...")
             trade_signal = gemini_analyzer.get_trade_signal(klines_df, symbol)
             print(f"Sinal de Trade Obtido do Gemini: {trade_signal if trade_signal else 'Nenhum/Erro'}")
             # Envia sinal para Telegram
             if trade_signal:
                 message = f"üìä *Sinal Quantis Trader* \\({escape_markdown_v2(symbol)} \\- {escape_markdown_v2(interval)}\\)\\:\n`{escape_markdown_v2(trade_signal)}`"
                 send_telegram_message(message)
             # N√£o enviamos mais a msg de erro daqui, strategy decide se notifica

        else:
             print("\nSem dados de Klines para enviar para an√°lise do Gemini.")
             send_telegram_message(f"‚ö†Ô∏è *Alerta* ({escape_markdown_v2(symbol)}): Sem dados de Klines para an√°lise neste ciclo.", disable_notification=True)


        # 3. Decis√£o e A√ß√£o (Simulada) da Estrat√©gia
        print("\nExecutando estrat√©gia...")
        strategy_manager.decide_action(trade_signal)

    except Exception as e:
        print(f"Erro durante o ciclo de trade: {e}")
        try:
            error_text_escaped = escape_markdown_v2(str(e))
            critical_message = f"üÜò *ERRO CR√çTICO no Ciclo* ({escape_markdown_v2(symbol)}):\n```\n{error_text_escaped}\n```"
            if len(critical_message) > 4000: critical_message = critical_message[:4000] + "\n\\.\\.\\. (erro truncado)"
            send_telegram_message(critical_message)
        except Exception as telegram_err:
            print(f"ERRO ADICIONAL: Falha ao enviar notifica√ß√£o de erro de ciclo para o Telegram: {telegram_err}")

    finally:
        end_cycle_time = datetime.datetime.now()
        cycle_duration = end_cycle_time - start_cycle_time
        print(f"--- Ciclo conclu√≠do em {cycle_duration}. ({end_cycle_time.strftime('%Y-%m-%d %H:%M:%S')}) ---")


# --- Fun√ß√£o Principal ---
def main():
    print("Iniciando o Quantis Crypto Trader - Gemini Version...")
    send_telegram_message("üöÄ Quantis Crypto Trader iniciando\\.\\.\\.")

    if not initialize_services():
        print("Falha na inicializa√ß√£o dos servi√ßos. Encerrando.")
        return # Sai se n√£o conseguir inicializar

    print("\nInicializa√ß√£o conclu√≠da. Configurando agendamento...")

    # --- Agendamento ---
    # Executa o ciclo de trade a cada hora, no minuto :01 (para dar tempo da vela fechar)
    # schedule.every().hour.at(":01").do(trade_cycle)
    # Para testar, vamos rodar a cada 1 minuto:
    schedule.every(1).minutes.do(trade_cycle)

    # Executa o ciclo uma vez imediatamente ao iniciar
    print("Executando o primeiro ciclo imediatamente...")
    trade_cycle()

    print("\nAgendamento configurado. Entrando no loop principal...")
    send_telegram_message("‚úÖ Rob√¥ online e aguardando agendamento\\.")

    while True:
        # Verifica se h√° tarefas agendadas para rodar
        schedule.run_pending()
        # Espera um pouco para n√£o consumir CPU excessivamente
        time.sleep(1)


if __name__ == "__main__":
    main()